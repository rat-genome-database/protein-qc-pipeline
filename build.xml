<project name="ProteinQcPipeline" default="dist" basedir=".">
    
    <property  name="svn.head.revision" value="19454"/>
    <property name="bin.dir" value="bin"/>
    <property name="src.dir" value="src"/>
    <property name="build.dir" value="classes"/>
    <property name="lib.dir" value="lib"/> 
	<property name="doc.dir" value="doc"/>
	<property name="logs.dir" value="logs"/>
	<property name="name" value="ProteinQcPipeline"/>
    <property name="dist.dir" value="dist" />
    <property name="version" value="1.0.0" />

	
    <path id="master-classpath">
        <fileset dir="${lib.dir}">
            <include name="*.jar"/>
        </fileset> 	
        <!--pathelement path="${build.dir}"/-->
    </path>

    <!-- Remove old build files -->
    <target name="clean" description="Clean output directories">
    	
        <delete dir="${build.dir}" failonerror="false"/>
        <delete file="${lib.dir}/${name}.jar" failonerror="false"/>    	
    	<delete failonerror="false">
    	    <fileset dir="${logs.dir}/" includes="**/*.log" />
		</delete>
        <delete failonerror="false">
            <fileset dir="${dist.dir}"/>
        </delete>
    </target>

    <!--Prepare for build -->
    <target name="prepare"  description="Prepare for build">
        <mkdir dir="${build.dir}"/>
    	<mkdir dir="${doc.dir}"/>
        <mkdir dir="${lib.dir}"/>
    	<mkdir dir="${logs.dir}"/>
        <mkdir dir="${dist.dir}"/>        
    </target>

    <!-- Compile all of our class files -->
    <target name="build" depends="prepare" description="Compile main source tree java files and build war file">
        <javac destdir="${build.dir}" target="1.7" source="1.7" debug="true"
               deprecation="false" optimize="false" failonerror="true">
            <src path="${src.dir}"/>
            <classpath refid="master-classpath"/>
        </javac>

        <!-- automatically create manifest.file -->
        <delete file="MANIFEST.FM"/>
        <tstamp>
           <format property="TODAY" pattern="yyyy-MM-dd HH:mm:ss" />
        </tstamp>
        <pathconvert property="mf.classpath" pathsep=" " dirsep="/">
            <path refid="master-classpath" />
            <chainedmapper>
                <flattenmapper />
                <globmapper from="*.jar" to="lib/*.jar" />
            </chainedmapper>
        </pathconvert>
        <manifest file="MANIFEST.FM">
            <attribute name="Main-Class" value="edu.mcw.rgd.pipelines.proteinqc.Manager"/>
            <attribute name="Built-By" value="${user.name}"/>
            <attribute name="Built-Date" value="${TODAY}"/>
            <attribute name="Class-Path" value="${mf.classpath}"/>
            <attribute name="RGD-Svn-Revision" value="${svn.head.revision}"/>
        </manifest>
        <jar destfile="${name}.jar" manifest="MANIFEST.FM">
            <fileset dir="${build.dir}"/>
        </jar>
        <delete file="MANIFEST.FM"/>

    </target>

    <target name="dist" depends="build" description="build the distribution">
        <mkdir dir="${dist.dir}/lib"/>
        <copy todir="${dist.dir}/lib">
            <fileset dir="lib">
            </fileset>
        </copy>
        <mkdir dir="${dist.dir}/properties"/>
        <copy todir="${dist.dir}/properties">
            <fileset dir="properties">
            </fileset>
        </copy>
        <copy todir="${dist.dir}" file="${name}.jar" />
        <copy todir="${dist.dir}">
            <fileset dir="${bin.dir}">
            </fileset>
        </copy>
        <mkdir dir="${dist.dir}/data"/>
        <mkdir dir="${dist.dir}/logs"/>
    </target>

    <target name="dist+docs" depends="dist" description="Create distribution with documentation">
        <mkdir dir="docs"/>
        <javadoc
               destdir="docs/${name}"
               author="true"
               version="true"
               use="true"
               windowtitle="${name}">

            <classpath refid="master-classpath"/>
            <fileset dir="src" defaultexcludes="yes">
            </fileset>
        </javadoc>
    </target>
  
    <target name="update_rgdcore" description="Copy rgdcore_1.1.3.jar from rgdcore project to lib directory">
        <copy file="../../../web/java/rgdcore/trunk/dist/rgdcore_1.1.3.jar" tofile="${lib.dir}/rgdcore_1.1.3.jar"/>
    </target>
</project>